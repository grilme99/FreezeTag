--!native
--!optimize 2
-- Generated by Zap v0.2.2 (https://github.com/red-blox/zap)
local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	local pos = outgoing_used
	outgoing_used = outgoing_used + len

	return pos
end

local function alloc_inst(inst: Instance)
	table.insert(outgoing_inst, inst)

	return #outgoing_inst
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

local types = {}
local reliable = Instance.new("RemoteEvent")
reliable.Name = "ZAP_RELIABLE"
reliable.Parent = game:GetService("ReplicatedStorage")

local unreliable = Instance.new("RemoteEvent")
unreliable.Name = "ZAP_UNRELIABLE"
unreliable.Parent = game:GetService("ReplicatedStorage")

local player_map = {}

game:GetService("Players").PlayerAdded:Connect(function(player)
	player_map[player] = {
		buff = buffer.create(64),
		used = 0,
		size = 64,
		inst = {},
	}
end)

game:GetService("Players").PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

game:GetService("RunService").Heartbeat:Connect(function()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end)
local events = table.create(2)
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 1 then
			local value
			value = incoming_inst[buffer.readu16(incoming_buff, read(2))]
			assert(value:IsA("Player"))
			if events[1] then
				events[1](player, value)
			end
		elseif id == 2 then
			local value
			value = incoming_inst[buffer.readu16(incoming_buff, read(2))]
			assert(value:IsA("Player"))
			if events[2] then
				events[2](player, value)
			end
		else
			error("Unknown event id")
		end
	end
end)
return {
	TagPlayer = {
		SetCallback = function(Callback: (Player, Player) -> ())
			events[1] = Callback
		end,
	},
	UntagPlayer = {
		SetCallback = function(Callback: (Player, Player) -> ())
			events[2] = Callback
		end,
	},
}
