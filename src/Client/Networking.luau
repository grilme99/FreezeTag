--!native
--!optimize 2
-- Generated by Zap v0.2.2 (https://github.com/red-blox/zap)
local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	local pos = outgoing_used
	outgoing_used = outgoing_used + len

	return pos
end

local function alloc_inst(inst: Instance)
	table.insert(outgoing_inst, inst)

	return #outgoing_inst
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

local types = {}
local reliable = game:GetService("ReplicatedStorage"):WaitForChild("ZAP_RELIABLE")
local unreliable = game:GetService("ReplicatedStorage"):WaitForChild("ZAP_UNRELIABLE")

local time = 0

game:GetService("RunService").Heartbeat:Connect(function(dt)
	time += dt

	if time >= (1 / 61) then
		time -= (1 / 61)

		if outgoing_used ~= 0 then
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

			reliable:FireServer(buff, outgoing_inst)

			outgoing_buff = buffer.create(64)
			outgoing_used = 0
			outgoing_size = 64
			table.clear(outgoing_inst)
		end
	end
end)
local events = table.create(2)
return {
	TagPlayer = {
		Fire = function(Value: Player)
			local pos = alloc(1)
			buffer.writeu8(outgoing_buff, pos, 1)
			assert(Value:IsA("Player"))
			local pos = alloc(2)
			buffer.writeu16(outgoing_buff, pos, alloc_inst(Value))
		end,
	},
	UntagPlayer = {
		Fire = function(Value: Player)
			local pos = alloc(1)
			buffer.writeu8(outgoing_buff, pos, 2)
			assert(Value:IsA("Player"))
			local pos = alloc(2)
			buffer.writeu16(outgoing_buff, pos, alloc_inst(Value))
		end,
	},
}
